// üéØ IBS ÌÜµÌï© ÏãúÏä§ÌÖú ÏÑ§Ï†ï ÌååÏùº
// Î™®Îì† HTML ÌååÏùºÏóêÏÑú Í≥µÌÜµÏúºÎ°ú ÏÇ¨Ïö©ÌïòÎäî ÏÑ§Ï†ïÍ∞íÎì§

const IBS_CONFIG = {
    // üîó Google Apps Script API URL (ÌÜµÏùºÎêú ÏóîÎìúÌè¨Ïù∏Ìä∏)
    API_URL: 'https://script.google.com/macros/s/AKfycbzXI3Aulv7fnx0DHP0DGUkgeDjHlNpMP7QpcxUwzyqlBR9IMw_s5Lpdbx3fyMcKYOEU8Q/exec',
    
    // üìä Íµ¨Í∏ÄÏãúÌä∏ ID
    SPREADSHEET_ID: '1MUHiU8a0p1aBs0wU94gmmlugwmB9qSYO8NLl-qZ9-ho',
    
    // üìã ÏãúÌä∏ Ïù¥Î¶ÑÎì§
    SHEETS: {
        QUOTATION: 'IBS_Í≤¨Ï†ÅÏÑú_Î™©Î°ù',
        TRANSACTION: 'IBS_Í±∞ÎûòÎ™ÖÏÑ∏ÏÑú_Î™©Î°ù', 
        INVOICE: 'IBS_Ïù∏Î≥¥Ïù¥Ïä§_Î™©Î°ù',
        STATS: 'IBS_ÌÜµÍ≥Ñ_ÎåÄÏãúÎ≥¥Îìú'
    },
    
    // ‚è±Ô∏è ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
    TIMEOUT: 5000, // 5Ï¥à
    
    // üîÑ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® Í∞ÑÍ≤©
    REFRESH_INTERVAL: 5 * 60 * 1000, // 5Î∂Ñ
    
    // üè¢ ÌöåÏÇ¨ Ï†ïÎ≥¥
    COMPANY: {
        name: 'ÏïÑÏù¥ÎπÑÏóêÏä§(I.B.S)',
        fullName: 'INNOVATION BRIDGE SOLUTION',
        ceo: 'Ïù¥Ï§ÄÎ°ú',
        phone: '010-3664-6268',
        fax: '0504-440-6268',
        email: 'ibs@ibs-info.com',
        website: 'web.ibs-info.com',
        address: 'Í≤ΩÍ∏∞ÎèÑ ÏàòÏõêÏãú Ïû•ÏïàÍµ¨ ÎçïÏòÅÎåÄÎ°ú 417Î≤àÍ∏∏ 52-5 ÎÇòÎèô 502Ìò∏',
        businessNumber: '405-08-53668'
    },
    
    // üõ†Ô∏è ÏÑúÎπÑÏä§ Î™©Î°ù
    SERVICES: {
        'Wire Probe JIG ÏÑ§Í≥Ñ': {
            specs: '‚ñ∂ Í±∞Î≤ÑÌååÏùº Î∂ÑÏÑù Î∞è ÏµúÏ†ÅÌôî ÏÑ§Í≥Ñ\n‚ñ∂ 20ÎÖÑ Í≤ΩÎ†• Ï†ÑÎ¨∏Í∞Ä ÏßÅÏ†ë ÏÑ§Í≥Ñ\n‚ñ∂ 3D Î™®Îç∏ÎßÅ Î∞è ÎèÑÎ©¥ Ï†úÍ≥µ\n‚ñ∂ ÏÑ§Í≥Ñ Í≤ÄÏ¶ù Î∞è ÏãúÎÆ¨Î†àÏù¥ÏÖò',
            price: 2000000
        },
        'JIG Ï†úÏûë ÏÑúÎπÑÏä§': {
            specs: '‚ñ∂ ÏÑ§Í≥Ñ ÏôÑÎ£å ÌõÑ ÏôÑÏ†úÌíà Ï†úÏûë\n‚ñ∂ ÌíàÏßà Í≤ÄÏ¶ù Î∞è ÌÖåÏä§Ìä∏ ÏôÑÎ£å\n‚ñ∂ 1ÎÖÑ Î¨¥ÏÉÅ A/S Ìè¨Ìï®\n‚ñ∂ ÌòÑÏû• ÏÑ§Ïπò Î∞è ÍµêÏú°',
            price: 3000000
        },
        'MEMS JIG Í∞úÎ∞ú': {
            specs: '‚ñ∂ ÏÑ∏Í≥Ñ ÏµúÏ¥à Ï†ÑÍ∏∞Í≤ÄÏÇ¨ MEMS JIG\n‚ñ∂ 20~30„éõ ÌÜµÌï© Structure ÏÑ§Í≥Ñ\n‚ñ∂ Í≥†Ï†ïÎ∞Ä Ï∏°Ï†ï ÏÜîÎ£®ÏÖò\n‚ñ∂ ÏôÑÏ†úÌíà Ï†úÏûë Ìè¨Ìï®',
            price: 5000000
        },
        'ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ ÍµêÏú°': {
            specs: '‚ñ∂ IA-Station, EZ-Cat ÍµêÏú°\n‚ñ∂ Cam350, AutoCAD ÌôúÏö©Î≤ï\n‚ñ∂ 1:1 ÎßûÏ∂§ ÍµêÏú° (8ÏãúÍ∞Ñ)\n‚ñ∂ Ïã§Ïäµ ÏûêÎ£å Î∞è Îß§Îâ¥Ïñº Ï†úÍ≥µ',
            price: 500000
        },
        'Í∏∞Ïà† Ïª®ÏÑ§ÌåÖ': {
            specs: '‚ñ∂ 20ÎÖÑ ÎÖ∏ÌïòÏö∞ Í∏∞Î∞ò Í∏∞Ïà† Ïª®ÏÑ§ÌåÖ\n‚ñ∂ ÏÑ§Í≥Ñ ÌîÑÎ°úÏÑ∏Ïä§ ÏµúÏ†ÅÌôî\n‚ñ∂ ÎπÑÏö© Ï†àÍ∞ê Î∞©Ïïà Ï†úÏãú\n‚ñ∂ Ï†ïÍ∏∞ Í∏∞Ïà† ÏßÄÏõê',
            price: 1000000
        },
        'PCB ÏÑ§Í≥Ñ ÏÑúÎπÑÏä§': {
            specs: '‚ñ∂ Îã§Ï∏µ PCB ÏÑ§Í≥Ñ Î∞è ÏµúÏ†ÅÌôî\n‚ñ∂ EMI/EMC Í≥†Î†§ ÏÑ§Í≥Ñ\n‚ñ∂ Î∂ÄÌíà Î∞∞Ïπò ÏµúÏ†ÅÌôî\n‚ñ∂ Ï†úÏ°∞ÏÑ± Í≤ÄÌÜ† Ìè¨Ìï®',
            price: 1500000
        },
        'ÌÖåÏä§Ìä∏ ÌîΩÏä§Ï≤ò Ï†úÏûë': {
            specs: '‚ñ∂ ICT/FCT ÌÖåÏä§Ìä∏ ÌîΩÏä§Ï≤ò\n‚ñ∂ Ï†ïÎ∞Ä Í∞ÄÍ≥µ Î∞è Ï°∞Î¶Ω\n‚ñ∂ ÏÑ±Îä• Í≤ÄÏ¶ù ÏôÑÎ£å\n‚ñ∂ Ïú†ÏßÄÎ≥¥Ïàò Îß§Îâ¥Ïñº Ï†úÍ≥µ',
            price: 2500000
        },
        'ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç ÏÑúÎπÑÏä§': {
            specs: '‚ñ∂ ÌÖåÏä§Ìä∏ ÌîÑÎ°úÍ∑∏Îû® Í∞úÎ∞ú\n‚ñ∂ ÏûêÎèôÌôî ÏãúÏä§ÌÖú Íµ¨Ï∂ï\n‚ñ∂ ÎîîÎ≤ÑÍπÖ Î∞è ÏµúÏ†ÅÌôî\n‚ñ∂ Í∏∞Ïà† Î¨∏ÏÑú ÏûëÏÑ±',
            price: 800000
        }
    }
};

// üîß Í≥µÌÜµ Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
const IBS_UTILS = {
    // Ï≤úÎã®ÏúÑ ÏΩ§Îßà Ìè¨Îß∑ÌåÖ
    formatNumber: (num) => {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    },
    
    // ÏΩ§Îßà Ï†úÍ±∞ÌïòÏó¨ Ïà´ÏûêÎ°ú Î≥ÄÌôò
    parseNumber: (str) => {
        return parseFloat(str.toString().replace(/,/g, '')) || 0;
    },
    
    // Ïò§Îäò ÎÇ†Ïßú Î∞òÌôò
    getTodayDate: () => {
        return new Date().toISOString().split('T')[0];
    },
    
    // ÎÇ†Ïßú + ÏùºÏàò Í≥ÑÏÇ∞
    addDays: (date, days) => {
        const result = new Date(date);
        result.setDate(result.getDate() + days);
        return result.toISOString().split('T')[0];
    },
    
    // Î©îÏãúÏßÄ ÌëúÏãú
    showMessage: (message, type = 'info') => {
        const alertClass = type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
        alert(`${alertClass} ${message}`);
    },
    
    // Î°úÎî© ÏÉÅÌÉú ÌëúÏãú
    showLoading: (show, element = null) => {
        if (element) {
            element.disabled = show;
            if (show) {
                element.dataset.originalText = element.textContent;
                element.textContent = 'üîÑ Ï≤òÎ¶¨ Ï§ë...';
            } else {
                element.textContent = element.dataset.originalText || element.textContent;
            }
        }
    }
};

// üåê API Ìò∏Ï∂ú Í≥µÌÜµ Ìï®Ïàò
const IBS_API = {
    // GET ÏöîÏ≤≠
    get: async (action, params = {}) => {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), IBS_CONFIG.TIMEOUT);
        
        try {
            const url = new URL(IBS_CONFIG.API_URL);
            url.searchParams.append('action', action);
            Object.keys(params).forEach(key => {
                url.searchParams.append(key, params[key]);
            });
            
            const response = await fetch(url, {
                method: 'GET',
                mode: 'cors',
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            return await response.json();
            
        } catch (error) {
            clearTimeout(timeoutId);
            console.error(`API GET Ïò§Î•ò (${action}):`, error);
            throw error;
        }
    },
    
    // POST ÏöîÏ≤≠
    post: async (data) => {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), IBS_CONFIG.TIMEOUT);
        
        try {
            const response = await fetch(IBS_CONFIG.API_URL, {
                method: 'POST',
                mode: 'cors',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            return await response.json();
            
        } catch (error) {
            clearTimeout(timeoutId);
            console.error('API POST Ïò§Î•ò:', error);
            throw error;
        }
    }
};

console.log('‚úÖ IBS ÌÜµÌï© ÏÑ§Ï†ï ÌååÏùº Î°úÎìú ÏôÑÎ£å'); 